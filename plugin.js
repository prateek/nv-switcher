/*
THIS IS A GENERATED/BUNDLED FILE BY TSUP
if you want to view the source visit the plugins github repository
*/
"use strict";
var plugin = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // src/plugin.ts
  var plugin_exports = {};
  __export(plugin_exports, {
    default: () => NvSwitcherPlugin
  });
  var import_obsidian = __require("obsidian");
  var DEFAULT_SETTINGS = {
    defaultHotkey: "Ctrl+O",
    searchLimit: 50,
    previewEnabled: true
  };
  var NvSwitcherPlugin = class extends import_obsidian.Plugin {
    constructor() {
      super(...arguments);
      this.settings = DEFAULT_SETTINGS;
    }
    async onload() {
      await this.loadSettings();
      this.addCommand({
        id: "open-nv-switcher",
        name: "Open nv-switcher",
        hotkeys: [{ modifiers: ["Ctrl"], key: "o" }],
        callback: () => {
          console.log("nv-switcher opened");
        }
      });
      this.addSettingTab(new NvSwitcherSettingsTab(this.app, this));
    }
    onunload() {
    }
    async loadSettings() {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    }
    async saveSettings() {
      await this.saveData(this.settings);
    }
  };
  var NvSwitcherSettingsTab = class extends import_obsidian.PluginSettingTab {
    constructor(app, plugin) {
      super(app, plugin);
      this.plugin = plugin;
    }
    display() {
      const { containerEl } = this;
      containerEl.empty();
      containerEl.createEl("h2", { text: "nv-switcher Settings" });
      containerEl.createEl("p", {
        text: "Settings interface will be implemented in task 2."
      });
    }
  };
  return __toCommonJS(plugin_exports);
})();
//# sourceMappingURL=plugin.js.map